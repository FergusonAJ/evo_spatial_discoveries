random_seed = 2;                // Seed for random number generator; use 0 to base on time.
Var pop_size = 1000;            // Number of organisms to evaluate in the population.
Var num_gens = 5000;

Population main_pop;            // Main population for managing candidate solutions.
Population next_pop;            // Temp. population while constructing the next generation.


EvalInterpolatedFitnessGraph eval_ifg {
  genotype_trait = "genotype";
  fitness_trait = "fitness";
  graph_filename = "../../shared_files/landscape.graph";
  mut_prob = 0.0125;
};

GenericIntsOrg ints_org {
  output_name = "genotype";
  mut_prob = 0;
  N = 3;
  init_random = 0;
  min_val = 0; 
  max_val = 100000;
};

SelectRoulette select_r {     // Replicate top fitness organisms via roulette selection
  fitness_fun = "10**fitness";      // Which trait provides the fitness value to use?
};

Spatial1DPlacement one_d_placement{
  target = "main_pop";
  grid_width = pop_size;
  does_wrap = 0;
};

DataFile fit_file { filename="fitness.csv"; };
fit_file.ADD_COLUMN( "Average Fitness", "main_pop.CALC_MEAN('fitness')" );
fit_file.ADD_COLUMN( "Maximum Fitness", "main_pop.CALC_MAX('fitness')" );
fit_file.ADD_COLUMN( "Dominant Fitness", "main_pop.CALC_MODE('fitness')" );

DataFile max_file { filename="max_org.csv"; };
OrgList best_org;
max_file.ADD_SETUP( "best_org = main_pop.FIND_MAX('fitness')" );
max_file.ADD_COLUMN( "Fitness", "best_org.TRAIT('fitness')" );
max_file.ADD_COLUMN( "Genome", "best_org.TRAIT('genotype')" );


@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  main_pop.INJECT("ints_org", pop_size);       // Inject starting population.
}

// Actions to perform every update.
@UPDATE(Var ud) {
  IF (ud == num_gens) EXIT();

  eval_ifg.EVAL(main_pop);
  eval_ifg.DETECT_DISCOVERIES(main_pop);
  Var mode_fit = main_pop.CALC_MODE("fitness");
  OrgList list_less = main_pop.FILTER("fitness < ${mode_fit}");
  OrgList list_equ  = main_pop.FILTER("fitness == ${mode_fit}");
  OrgList list_gtr  = main_pop.FILTER("fitness > ${mode_fit}");
  PRINT("UD:", GET_UPDATE(),
        "  MainPopSize=", main_pop.SIZE(),
        "  AveFitness=", main_pop.CALC_MEAN("fitness"),
        "  MaxFitness=", main_pop.CALC_MAX("fitness"),
        "  ModeFitness=", mode_fit,
        "\nMODE_LESS=", list_less.SIZE(),
        "  MODE_EQU=", list_equ.SIZE(),
        "  MODE_GTR=", list_gtr.SIZE()
       );
  fit_file.WRITE();
  max_file.WRITE();
  main_pop.SAVE_TO_FILE("snapshots/ud_" + ud + ".pop");

  select_r.SELECT_SPATIAL(main_pop, next_pop);
  main_pop.REPLACE_WITH(next_pop);
}

@UPDATE(Var ud2) IF (ud2 == num_gens) EXIT();

